<div id="comments-list">
<!--    attribute으로 articleController에서 등록된 데이터-->
    {{#commentDtos}}
        <div class="card" id = "comments-{{id}}" >
            <div class="card-header">
                {{nickname}}

                <!--             삭제 버튼          -->
                <button type="button" class="btn btn-sm btn-outline-danger comment-delete-btn"
                data-comment-id="{{id}}">
                    Delete</button>
            </div>
            <div class="card-body">
                {{body}}
            </div>

        </div>
    {{/commentDtos}}

</div>



<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!--        댓글 수정 폼-->
                        <!--    nickname input-->
                        <div class="mb-3">
                            <label class="form-label">Nickname</label>
                            <input class="form-control form-control-sm" id="edit-comment-nickname">
                        </div>

                        <!--    댓글 본문 입력-->
                        <div class="mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                        </div>

                        <!--    hidden-input-->
                        {{#article}}
                            <input type="hidden" id="edit-comment-id">
                            <input type="hidden" id="edit-comment-article-id" value="{{id}}">
                        {{/article}}

                        <!--    전송 버튼-->
                        <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">Edit Comment</button>
                </form>
            </div>

        </div>
    </div>
</div>
<!--댓글 수정 JS-->
<script>{
//모달 요소 선택
 const commentEditModal=document.querySelector("#comment-edit-modal");

 //모달 이벤트 감지
 commentEditModal.addEventListener("show.bs.modal", function(event){// modal이 열리게 됬을때 trigger
 console.log("모달이 열렸다")

 //모달을 트리거 한 버튼 선택  class="btn btn-outline-primary"
 const triggerBtn = event.relatedTarget;

 //데이터 가져오기
 const id = triggerBtn.getAttribute("data-bs-id");
 const nickname = triggerBtn.getAttribute("data-bs-nickname");
 const body = triggerBtn.getAttribute("data-bs-body");
 const articleId = triggerBtn.getAttribute("data-bs-article-id");

 //데이터를 반영
 document.querySelector("#edit-comment-nickname").value= nickname;
 document.querySelector("#edit-comment-body").value= body;
 document.querySelector("#edit-comment-id").value= id;
 document.querySelector("#edit-comment-article-id").value= articleId;


 });



}

//수정 완료 버튼
{
const commentUpdateBtn= document.querySelector("#comment-update-btn");
//클릭 이벤트 감지 및 처리
commentUpdateBtn.addEventListener("click", function(){
// 수정 댓글 객체를 생성
const comment ={
id: document.querySelector("#edit-comment-id").value,
nickname: document.querySelector("#edit-comment-nickname").value,
body: document.querySelector("#edit-comment-body").value,
article_id: document.querySelector("#edit-comment-article-id").value
}

console.log(comment);
//수정 REST API를 호출 -FETCH()
//url 주소는 Patch api 주소로 설정
const url = "/api/comments/"+comment.id;

fetch(url, {
method: "PATCH",  //patch 메소드 요청
body:  JSON.stringify(comment), // 수정된 댓글 객체를 JSON으로 변환 후 전달
headers:{
"content-Type": "application/json"
}

}).then(response =>{
//http응답 코드에 따른 메세지 출력
const msg = (response.ok) ? "comment editted" : "comment edit failed";
//현재 페이지를 새로고침
alert(msg);
window.location.reload();
});

});

}
</script>

<!--댓글 삭제 JS-->
<script>
{
//delete 버튼 선택
const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

//delete 번튼 이벤트를 처리
commentDeleteBtns.forEach(btn=>{
//addEventListener은 객체가 있어야 가능하므로 btn을 매개변수로 넣어준다
//이벤트 등록
btn.addEventListener("click", (event) =>{
//이벤트 발생 요소를 선택
//클릭 이벤트가 발생 했을때 트리거한 버튼을 가져오려면 event 매개변수 필요
const commentDeleteBtn = event.srcElement;
//삭제 댓글 id 가져오기
const commentId = commentDeleteBtn.getAttribute("data-comment-id");
console.log(commentId);

//삭제 api 호출 및 처리
const url =`/api/comments/${commentId}`;
fetch(url,{
    method: "DELETE"

}).then(response=>{
    //댓글 삭제 실패 처리
    if(!response.ok){
        alert("comment delete Failed");
        return;
    }
    //삭제 성공시, 댓글을 화면에서 지움
    const target = document.querySelector(`#comments-${commentId}`);
    target.remove();
});
});
});



}
</script>